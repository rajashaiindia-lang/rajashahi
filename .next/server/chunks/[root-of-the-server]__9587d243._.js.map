{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\nif (!MONGODB_URI) {\n  throw new Error(\"MONGODB_URI is not set\");\n}\n\n// Global cache to survive hot-reloads in dev\ndeclare global {\n  // eslint-disable-next-line no-var\n  var _mongoose: { conn: typeof mongoose | null, promise: Promise<typeof mongoose> | null } | undefined;\n}\n\nlet cached = global._mongoose;\nif (!cached) cached = global._mongoose = { conn: null, promise: null };\n\nexport async function dbConnect() {\n  if (cached!.conn) return cached!.conn;\n\n  if (!cached!.promise) {\n    cached!.promise = mongoose.connect(MONGODB_URI).then((m) => m);\n  }\n  cached!.conn = await cached!.promise;\n  return cached!.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAQA,IAAI,SAAS,OAAO,SAAS;AAC7B,IAAI,CAAC,QAAQ,SAAS,OAAO,SAAS,GAAG;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAQ,IAAI,EAAE,OAAO,OAAQ,IAAI;IAErC,IAAI,CAAC,OAAQ,OAAO,EAAE;QACpB,OAAQ,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,IAAM;IAC9D;IACA,OAAQ,IAAI,GAAG,MAAM,OAAQ,OAAO;IACpC,OAAO,OAAQ,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/models/Round.ts"],"sourcesContent":["// models/Round.ts\nimport { Schema, Document, models, model } from 'mongoose';\n\nexport type RoundStatus =\n  | 'READY'\n  | 'OPENING_PUBLISHED'  // <— keep temporarily for backward-compat\n  | 'DAY_PUBLISHED'\n  | 'CLOSED';\n\nexport interface RoundCore {\n  roundId: string;\n  sessionDate: string;     // 'YYYY-MM-DD'\n  dayTime: string;         // 'HH:mm'\n  nightTime: string;       // 'HH:mm'\n  dayPanna?: string;\n  dayDigit?: number;\n  nightPanna?: string;\n  nightDigit?: number;\n  jodi?: string;\n  status: RoundStatus;\n  createdAt: Date;\n  updatedAt: Date;\n}\nexport interface IRound extends Document, RoundCore {}\n\nconst timeHHmm = /^([01]\\d|2[0-3]):[0-5]\\d$/;\nconst panna3 = /^\\d{3}$/;\nconst jodi2  = /^\\d{2}$/;\n\nconst RoundSchema = new Schema<IRound>({\n  roundId: { type: String, required: true, unique: true },\n  sessionDate: { type: String, required: true, match: /^\\d{4}-\\d{2}-\\d{2}$/ },\n\n  dayTime:   { type: String, required: true, match: timeHHmm },\n  nightTime: { type: String, required: true, match: timeHHmm },\n\n  dayPanna:   { type: String, match: panna3, default: undefined },\n  dayDigit:   { type: Number, min: 0, max: 9, default: undefined },\n  nightPanna: { type: String, match: panna3, default: undefined },\n  nightDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  jodi: { type: String, match: jodi2, default: undefined },\n\n  status: {\n    type: String,\n    enum: ['READY','OPENING_PUBLISHED','DAY_PUBLISHED','CLOSED'], // <— includes both\n    default: 'READY',\n    required: true\n  }\n}, { timestamps: true });\n\nRoundSchema.index({ sessionDate: 1 }, { unique: true });\n// models/Round.ts (add this BEFORE export default)\nRoundSchema.pre('validate', function (next) {\n  // @ts-ignore – tolerate legacy fields\n  const openingTime = (this as any).openingTime;\n  // @ts-ignore\n  const closingTime = (this as any).closingTime;\n\n  if (!this.dayTime && openingTime) this.dayTime = openingTime;\n  if (!this.nightTime && closingTime) this.nightTime = closingTime;\n\n  // Legacy result fields (best-effort)\n  // @ts-ignore\n  const openingPanna = (this as any).openingPanna;\n  // @ts-ignore\n  const openingDigit = (this as any).openingDigit;\n  // @ts-ignore\n  const closingPanna = (this as any).closingPanna;\n  // @ts-ignore\n  const closingDigit = (this as any).closingDigit;\n\n  if (!this.dayPanna && openingPanna) this.dayPanna = openingPanna;\n  if (this.dayDigit == null && openingDigit != null) this.dayDigit = openingDigit;\n  if (!this.nightPanna && closingPanna) this.nightPanna = closingPanna;\n  if (this.nightDigit == null && closingDigit != null) this.nightDigit = closingDigit;\n\n  // Status bridge: allow old 'OPENING_PUBLISHED'\n  // (you already added the enum, this is just a safety)\n  // no mapping needed unless you want to force-convert:\n  // if (this.status === 'OPENING_PUBLISHED') this.status = 'DAY_PUBLISHED';\n\n  next();\n});\n\nexport default models.Round || model<IRound>('Round', RoundSchema);\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAClB;;AAwBA,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,QAAS;AAEf,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAS;IACrC,SAAS;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACtD,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAsB;IAE1E,SAAW;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAC3D,WAAW;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAE3D,UAAY;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAC9D,UAAY;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAC/D,YAAY;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAC9D,YAAY;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAE/D,MAAM;QAAE,MAAM;QAAQ,OAAO;QAAO,SAAS;IAAU;IAEvD,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAQ;YAAoB;YAAgB;SAAS;QAC5D,SAAS;QACT,UAAU;IACZ;AACF,GAAG;IAAE,YAAY;AAAK;AAEtB,YAAY,KAAK,CAAC;IAAE,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;AACrD,mDAAmD;AACnD,YAAY,GAAG,CAAC,YAAY,SAAU,IAAI;IACxC,sCAAsC;IACtC,MAAM,cAAc,AAAC,IAAI,CAAS,WAAW;IAC7C,aAAa;IACb,MAAM,cAAc,AAAC,IAAI,CAAS,WAAW;IAE7C,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,aAAa,IAAI,CAAC,OAAO,GAAG;IACjD,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,aAAa,IAAI,CAAC,SAAS,GAAG;IAErD,qCAAqC;IACrC,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAC/C,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAC/C,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAC/C,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAE/C,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,cAAc,IAAI,CAAC,QAAQ,GAAG;IACpD,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,gBAAgB,MAAM,IAAI,CAAC,QAAQ,GAAG;IACnE,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,cAAc,IAAI,CAAC,UAAU,GAAG;IACxD,IAAI,IAAI,CAAC,UAAU,IAAI,QAAQ,gBAAgB,MAAM,IAAI,CAAC,UAAU,GAAG;IAEvE,+CAA+C;IAC/C,sDAAsD;IACtD,sDAAsD;IACtD,0EAA0E;IAE1E;AACF;uCAEe,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAU,SAAS","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/app/api/result/history/route.ts"],"sourcesContent":["// app/api/result/history/route.ts\nimport { NextResponse } from 'next/server';\nimport { dbConnect } from '@/lib/mongodb';\nimport Round from '@/models/Round';\n\ntype RoundLite = {\n  sessionDate: string;\n  dayPanna?: string;\n  dayDigit?: number;\n  nightPanna?: string;\n  nightDigit?: number;\n  jodi?: string;\n  status: 'READY' | 'DAY_PUBLISHED' | 'CLOSED' | 'OPENING_PUBLISHED';\n};\n\nfunction monthBounds(yyyyMM: string) {\n  const [Y, M] = yyyyMM.split('-').map(Number);\n  const start = new Date(Date.UTC(Y, M - 1, 1, 0, 0, 0));\n  const next = new Date(Date.UTC(Y, M, 1, 0, 0, 0));\n  const lo = start.toISOString().slice(0, 10);\n  const hi = next.toISOString().slice(0, 10);\n  return { lo, hi };\n}\nfunction addDays(d: Date, n: number) {\n  const x = new Date(d);\n  x.setUTCDate(x.getUTCDate() + n);\n  return x;\n}\n\nexport async function GET(req: Request) {\n  await dbConnect();\n\n  const { searchParams } = new URL(req.url);\n  const month = searchParams.get('month');     // e.g. '2025-10'\n  const limit = Number(searchParams.get('limit') ?? 0);\n  const weeksParam = searchParams.get('weeks');// e.g. '24'\n  const endParam = searchParams.get('end');    // e.g. '2025-10-18'\n\n  const filter: any = {};\n  let lo: string | undefined;\n  let hi: string | undefined;\n\n  if (month) {\n    const b = monthBounds(month);\n    lo = b.lo; hi = b.hi;\n  } else if (weeksParam) {\n    const weeks = Math.max(1, Math.min(52, Number(weeksParam) || 24));\n\n    // latest sessionDate as end if not provided\n    const latest = await Round\n      .findOne({})\n      .sort({ sessionDate: -1 })\n      .select('sessionDate')\n      .lean<{ sessionDate: string } | null>();\n    const endDateStr = endParam || latest?.sessionDate;\n    if (!endDateStr) return NextResponse.json({ items: [] });\n\n    const end = new Date(`${endDateStr}T00:00:00Z`);\n    const start = addDays(end, -(weeks * 7) + 1);\n    lo = start.toISOString().slice(0, 10);\n    hi = addDays(end, 1).toISOString().slice(0, 10);\n  }\n\n  if (lo && hi) filter.sessionDate = { $gte: lo, $lt: hi };\n\n  const rounds = await Round\n    .find(filter)\n    .sort({ sessionDate: 1 })\n    .select('sessionDate dayPanna dayDigit nightPanna nightDigit jodi status')\n    .lean<RoundLite[]>();\n\n  const items = (month || weeksParam || !limit) ? rounds : rounds.slice(-limit);\n\n  // Bridge legacy OPENING_PUBLISHED -> DAY_PUBLISHED for the UI\n  const mapped = items.map(it => ({\n    ...it,\n    status: it.status === 'OPENING_PUBLISHED' ? 'DAY_PUBLISHED' : it.status\n  }));\n\n  return NextResponse.json({ items: mapped });\n}\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;AAClC;AACA;AACA;;;;AAYA,SAAS,YAAY,MAAc;IACjC,MAAM,CAAC,GAAG,EAAE,GAAG,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC;IACrC,MAAM,QAAQ,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG;IACnD,MAAM,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;IAC9C,MAAM,KAAK,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG;IACxC,MAAM,KAAK,KAAK,WAAW,GAAG,KAAK,CAAC,GAAG;IACvC,OAAO;QAAE;QAAI;IAAG;AAClB;AACA,SAAS,QAAQ,CAAO,EAAE,CAAS;IACjC,MAAM,IAAI,IAAI,KAAK;IACnB,EAAE,UAAU,CAAC,EAAE,UAAU,KAAK;IAC9B,OAAO;AACT;AAEO,eAAe,IAAI,GAAY;IACpC,MAAM,CAAA,GAAA,gHAAA,CAAA,YAAS,AAAD;IAEd,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,QAAQ,aAAa,GAAG,CAAC,UAAc,iBAAiB;IAC9D,MAAM,QAAQ,OAAO,aAAa,GAAG,CAAC,YAAY;IAClD,MAAM,aAAa,aAAa,GAAG,CAAC,UAAS,YAAY;IACzD,MAAM,WAAW,aAAa,GAAG,CAAC,QAAW,oBAAoB;IAEjE,MAAM,SAAc,CAAC;IACrB,IAAI;IACJ,IAAI;IAEJ,IAAI,OAAO;QACT,MAAM,IAAI,YAAY;QACtB,KAAK,EAAE,EAAE;QAAE,KAAK,EAAE,EAAE;IACtB,OAAO,IAAI,YAAY;QACrB,MAAM,QAAQ,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,OAAO,eAAe;QAE7D,4CAA4C;QAC5C,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CACvB,OAAO,CAAC,CAAC,GACT,IAAI,CAAC;YAAE,aAAa,CAAC;QAAE,GACvB,MAAM,CAAC,eACP,IAAI;QACP,MAAM,aAAa,YAAY,QAAQ;QACvC,IAAI,CAAC,YAAY,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,EAAE;QAAC;QAEtD,MAAM,MAAM,IAAI,KAAK,GAAG,WAAW,UAAU,CAAC;QAC9C,MAAM,QAAQ,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI;QAC1C,KAAK,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG;QAClC,KAAK,QAAQ,KAAK,GAAG,WAAW,GAAG,KAAK,CAAC,GAAG;IAC9C;IAEA,IAAI,MAAM,IAAI,OAAO,WAAW,GAAG;QAAE,MAAM;QAAI,KAAK;IAAG;IAEvD,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CACvB,IAAI,CAAC,QACL,IAAI,CAAC;QAAE,aAAa;IAAE,GACtB,MAAM,CAAC,mEACP,IAAI;IAEP,MAAM,QAAQ,AAAC,SAAS,cAAc,CAAC,QAAS,SAAS,OAAO,KAAK,CAAC,CAAC;IAEvE,8DAA8D;IAC9D,MAAM,SAAS,MAAM,GAAG,CAAC,CAAA,KAAM,CAAC;YAC9B,GAAG,EAAE;YACL,QAAQ,GAAG,MAAM,KAAK,sBAAsB,kBAAkB,GAAG,MAAM;QACzE,CAAC;IAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAO;AAC3C","debugId":null}}]
}