{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\nif (!MONGODB_URI) {\n  throw new Error(\"MONGODB_URI is not set\");\n}\n\n// Global cache to survive hot-reloads in dev\ndeclare global {\n  // eslint-disable-next-line no-var\n  var _mongoose: { conn: typeof mongoose | null, promise: Promise<typeof mongoose> | null } | undefined;\n}\n\nlet cached = global._mongoose;\nif (!cached) cached = global._mongoose = { conn: null, promise: null };\n\nexport async function dbConnect() {\n  if (cached!.conn) return cached!.conn;\n\n  if (!cached!.promise) {\n    cached!.promise = mongoose.connect(MONGODB_URI).then((m) => m);\n  }\n  cached!.conn = await cached!.promise;\n  return cached!.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAQA,IAAI,SAAS,OAAO,SAAS;AAC7B,IAAI,CAAC,QAAQ,SAAS,OAAO,SAAS,GAAG;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAQ,IAAI,EAAE,OAAO,OAAQ,IAAI;IAErC,IAAI,CAAC,OAAQ,OAAO,EAAE;QACpB,OAAQ,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,IAAM;IAC9D;IACA,OAAQ,IAAI,GAAG,MAAM,OAAQ,OAAO;IACpC,OAAO,OAAQ,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/models/Round.ts"],"sourcesContent":["// models/Round.ts\nimport { Schema, Document, models, model } from 'mongoose';\n\nexport type Market = 'KALYAN';\nexport type RoundStatus = 'READY' | 'OPENING_PUBLISHED' | 'CLOSED';\n\n/** Plain shape (what .lean() returns) */\nexport interface RoundCore {\n  roundId: string;               // unique, timestamp-based or your generator\n  sessionDate: string;           // 'YYYY-MM-DD' (local session date)\n  market: Market;                // 'KALYAN' | 'DEMO' (extend later if needed)\n  openingTime: string;           // 'HH:mm' (local publish time)\n  closingTime: string;           // 'HH:mm'\n\n  // Opening side\n  openingPanna?: string;         // '000'..'999'\n  openingDigit?: number;         // 0..9 (derived from openingPanna)\n\n  // Closing side\n  closingPanna?: string;         // '000'..'999'\n  closingDigit?: number;         // 0..9 (derived from closingPanna)\n\n  // Derived convenience\n  jodi?: string;                 // '00'..'99' = `${openingDigit}${closingDigit}`\n\n  status: RoundStatus;\n\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/** Mongoose document shape (when not using .lean()) */\nexport interface IRound extends Document, RoundCore {}\n\nconst timeHHmm = /^([01]\\d|2[0-3]):[0-5]\\d$/;\nconst panna3 = /^\\d{3}$/;\nconst jodi2 = /^\\d{2}$/;\n\nconst RoundSchema = new Schema<IRound>({\n  roundId: { type: String, required: true, unique: true },\n\n  sessionDate: {\n    type: String,\n    required: true,                     // e.g., '2025-10-01'\n    match: /^\\d{4}-\\d{2}-\\d{2}$/\n  },\n  market: {\n    type: String,\n  default: 'KALYAN',\n    required: true\n  },\n\n  openingTime: { type: String, required: true, match: timeHHmm },\n  closingTime: { type: String, required: true, match: timeHHmm },\n\n  openingPanna: { type: String, match: panna3, default: undefined },\n  openingDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  closingPanna: { type: String, match: panna3, default: undefined },\n  closingDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  jodi: { type: String, match: jodi2, default: undefined },\n\n  status: {\n    type: String,\n    enum: ['READY', 'OPENING_PUBLISHED', 'CLOSED'],\n    default: 'READY',\n    required: true\n  }\n}, { timestamps: true });\n\n// Helpful unique constraint to avoid duplicate market-day sessions:\nRoundSchema.index({ market: 1, sessionDate: 1 }, { unique: true });\n\nexport default models.Round || model<IRound>('Round', RoundSchema);\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAClB;;AAiCA,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,QAAQ;AAEd,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAS;IACrC,SAAS;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IAEtD,aAAa;QACX,MAAM;QACN,UAAU;QACV,OAAO;IACT;IACA,QAAQ;QACN,MAAM;QACR,SAAS;QACP,UAAU;IACZ;IAEA,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAC7D,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAE7D,cAAc;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAChE,cAAc;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAEjE,cAAc;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAChE,cAAc;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAEjE,MAAM;QAAE,MAAM;QAAQ,OAAO;QAAO,SAAS;IAAU;IAEvD,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAS;YAAqB;SAAS;QAC9C,SAAS;QACT,UAAU;IACZ;AACF,GAAG;IAAE,YAAY;AAAK;AAEtB,oEAAoE;AACpE,YAAY,KAAK,CAAC;IAAE,QAAQ;IAAG,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAEjD,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAU,SAAS","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/app/api/result/history/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { dbConnect } from '@/lib/mongodb';\nimport Round from '@/models/Round';\n\ntype RoundLite = {\n  sessionDate: string;\n  openingPanna?: string;\n  closingPanna?: string;\n  openingDigit?: number;\n  closingDigit?: number;\n  jodi?: string;\n  status: 'READY' | 'OPENING_PUBLISHED' | 'CLOSED';\n  market: string;\n};\n\n// Month helpers\nfunction monthBounds(yyyyMM: string) {\n  const [Y, M] = yyyyMM.split('-').map(Number);\n  const start = new Date(Date.UTC(Y, M - 1, 1, 0, 0, 0));\n  const next = new Date(Date.UTC(Y, M, 1, 0, 0, 0));\n  const lo = start.toISOString().slice(0, 10); // inclusive\n  const hi = next.toISOString().slice(0, 10);  // exclusive\n  return { lo, hi };\n}\n\nfunction addDays(d: Date, n: number) {\n  const x = new Date(d);\n  x.setUTCDate(x.getUTCDate() + n);\n  return x;\n}\n\nexport async function GET(req: Request) {\n  await dbConnect();\n\n  const { searchParams } = new URL(req.url);\n  const month = searchParams.get('month');            // e.g. '2025-10'\n  const limit = Number(searchParams.get('limit') ?? 0);\n  const weeksParam = searchParams.get('weeks');       // e.g. '6'\n  const endParam = searchParams.get('end');           // e.g. '2025-10-16'\n  const market = searchParams.get('market') ?? 'KALYAN';\n\n  const filter: any = { market };\n  let lo: string | undefined;\n  let hi: string | undefined;\n\n  if (month) {\n    const b = monthBounds(month);\n    lo = b.lo; hi = b.hi;\n  } else if (weeksParam) {\n    // Allow up to 52 weeks (~1 year)\nconst weeks = Math.max(1, Math.min(52, Number(weeksParam) || 6));\n\n\n    let endDateStr = endParam;\n    if (!endDateStr) {\n      // ðŸ‘‡ Explicitly type the lean() result to avoid union [] | {} typings\n      const latest = await Round\n        .findOne({ market })\n        .sort({ sessionDate: -1 })\n        .select('sessionDate')\n        .lean<{ sessionDate: string } | null>();\n\n      if (!latest) return NextResponse.json({ items: [] });\n      endDateStr = latest.sessionDate;\n    }\n\n    const end = new Date(`${endDateStr}T00:00:00Z`);\n    const start = addDays(end, -(weeks * 7) + 1); // inclusive\n    lo = start.toISOString().slice(0, 10);\n    hi = addDays(end, 1).toISOString().slice(0, 10); // exclusive\n  }\n\n  if (lo && hi) {\n    filter.sessionDate = { $gte: lo, $lt: hi };\n  }\n\n  // ðŸ‘‡ Also type the array returned by lean()\n  const rounds = await Round\n    .find(filter)\n    .sort({ sessionDate: 1 })\n    .select('sessionDate openingPanna closingPanna openingDigit closingDigit jodi status market')\n    .lean<RoundLite[]>();\n\n  const items = (month || weeksParam || !limit) ? rounds : rounds.slice(-limit);\n  return NextResponse.json({ items });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAaA,gBAAgB;AAChB,SAAS,YAAY,MAAc;IACjC,MAAM,CAAC,GAAG,EAAE,GAAG,OAAO,KAAK,CAAC,KAAK,GAAG,CAAC;IACrC,MAAM,QAAQ,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG;IACnD,MAAM,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;IAC9C,MAAM,KAAK,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,KAAK,YAAY;IACzD,MAAM,KAAK,KAAK,WAAW,GAAG,KAAK,CAAC,GAAG,KAAM,YAAY;IACzD,OAAO;QAAE;QAAI;IAAG;AAClB;AAEA,SAAS,QAAQ,CAAO,EAAE,CAAS;IACjC,MAAM,IAAI,IAAI,KAAK;IACnB,EAAE,UAAU,CAAC,EAAE,UAAU,KAAK;IAC9B,OAAO;AACT;AAEO,eAAe,IAAI,GAAY;IACpC,MAAM,CAAA,GAAA,gHAAA,CAAA,YAAS,AAAD;IAEd,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,QAAQ,aAAa,GAAG,CAAC,UAAqB,iBAAiB;IACrE,MAAM,QAAQ,OAAO,aAAa,GAAG,CAAC,YAAY;IAClD,MAAM,aAAa,aAAa,GAAG,CAAC,UAAgB,WAAW;IAC/D,MAAM,WAAW,aAAa,GAAG,CAAC,QAAkB,oBAAoB;IACxE,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;IAE7C,MAAM,SAAc;QAAE;IAAO;IAC7B,IAAI;IACJ,IAAI;IAEJ,IAAI,OAAO;QACT,MAAM,IAAI,YAAY;QACtB,KAAK,EAAE,EAAE;QAAE,KAAK,EAAE,EAAE;IACtB,OAAO,IAAI,YAAY;QACrB,iCAAiC;QACrC,MAAM,QAAQ,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,OAAO,eAAe;QAGzD,IAAI,aAAa;QACjB,IAAI,CAAC,YAAY;YACf,sEAAsE;YACtE,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CACvB,OAAO,CAAC;gBAAE;YAAO,GACjB,IAAI,CAAC;gBAAE,aAAa,CAAC;YAAE,GACvB,MAAM,CAAC,eACP,IAAI;YAEP,IAAI,CAAC,QAAQ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,EAAE;YAAC;YAClD,aAAa,OAAO,WAAW;QACjC;QAEA,MAAM,MAAM,IAAI,KAAK,GAAG,WAAW,UAAU,CAAC;QAC9C,MAAM,QAAQ,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY;QAC1D,KAAK,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG;QAClC,KAAK,QAAQ,KAAK,GAAG,WAAW,GAAG,KAAK,CAAC,GAAG,KAAK,YAAY;IAC/D;IAEA,IAAI,MAAM,IAAI;QACZ,OAAO,WAAW,GAAG;YAAE,MAAM;YAAI,KAAK;QAAG;IAC3C;IAEA,4CAA4C;IAC5C,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CACvB,IAAI,CAAC,QACL,IAAI,CAAC;QAAE,aAAa;IAAE,GACtB,MAAM,CAAC,sFACP,IAAI;IAEP,MAAM,QAAQ,AAAC,SAAS,cAAc,CAAC,QAAS,SAAS,OAAO,KAAK,CAAC,CAAC;IACvE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAM;AACnC","debugId":null}}]
}