{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\nif (!MONGODB_URI) {\n  throw new Error(\"MONGODB_URI is not set\");\n}\n\n// Global cache to survive hot-reloads in dev\ndeclare global {\n  // eslint-disable-next-line no-var\n  var _mongoose: { conn: typeof mongoose | null, promise: Promise<typeof mongoose> | null } | undefined;\n}\n\nlet cached = global._mongoose;\nif (!cached) cached = global._mongoose = { conn: null, promise: null };\n\nexport async function dbConnect() {\n  if (cached!.conn) return cached!.conn;\n\n  if (!cached!.promise) {\n    cached!.promise = mongoose.connect(MONGODB_URI).then((m) => m);\n  }\n  cached!.conn = await cached!.promise;\n  return cached!.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAQA,IAAI,SAAS,OAAO,SAAS;AAC7B,IAAI,CAAC,QAAQ,SAAS,OAAO,SAAS,GAAG;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAQ,IAAI,EAAE,OAAO,OAAQ,IAAI;IAErC,IAAI,CAAC,OAAQ,OAAO,EAAE;QACpB,OAAQ,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,IAAM;IAC9D;IACA,OAAQ,IAAI,GAAG,MAAM,OAAQ,OAAO;IACpC,OAAO,OAAQ,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/models/Round.ts"],"sourcesContent":["// models/Round.ts\nimport { Schema, Document, models, model } from 'mongoose';\n\nexport type RoundStatus =\n  | 'READY'\n  | 'OPENING_PUBLISHED'  // <— keep temporarily for backward-compat\n  | 'DAY_PUBLISHED'\n  | 'CLOSED';\n\nexport interface RoundCore {\n  roundId: string;\n  sessionDate: string;     // 'YYYY-MM-DD'\n  dayTime: string;         // 'HH:mm'\n  nightTime: string;       // 'HH:mm'\n  dayPanna?: string;\n  dayDigit?: number;\n  nightPanna?: string;\n  nightDigit?: number;\n  jodi?: string;\n  status: RoundStatus;\n  createdAt: Date;\n  updatedAt: Date;\n}\nexport interface IRound extends Document, RoundCore {}\n\nconst timeHHmm = /^([01]\\d|2[0-3]):[0-5]\\d$/;\nconst panna3 = /^\\d{3}$/;\nconst jodi2  = /^\\d{2}$/;\n\nconst RoundSchema = new Schema<IRound>({\n  roundId: { type: String, required: true, unique: true },\n  sessionDate: { type: String, required: true, match: /^\\d{4}-\\d{2}-\\d{2}$/ },\n\n  dayTime:   { type: String, required: true, match: timeHHmm },\n  nightTime: { type: String, required: true, match: timeHHmm },\n\n  dayPanna:   { type: String, match: panna3, default: undefined },\n  dayDigit:   { type: Number, min: 0, max: 9, default: undefined },\n  nightPanna: { type: String, match: panna3, default: undefined },\n  nightDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  jodi: { type: String, match: jodi2, default: undefined },\n\n  status: {\n    type: String,\n    enum: ['READY','OPENING_PUBLISHED','DAY_PUBLISHED','CLOSED'], // <— includes both\n    default: 'READY',\n    required: true\n  }\n}, { timestamps: true });\n\nRoundSchema.index({ sessionDate: 1 }, { unique: true });\n// models/Round.ts (add this BEFORE export default)\nRoundSchema.pre('validate', function (next) {\n  // @ts-ignore – tolerate legacy fields\n  const openingTime = (this as any).openingTime;\n  // @ts-ignore\n  const closingTime = (this as any).closingTime;\n\n  if (!this.dayTime && openingTime) this.dayTime = openingTime;\n  if (!this.nightTime && closingTime) this.nightTime = closingTime;\n\n  // Legacy result fields (best-effort)\n  // @ts-ignore\n  const openingPanna = (this as any).openingPanna;\n  // @ts-ignore\n  const openingDigit = (this as any).openingDigit;\n  // @ts-ignore\n  const closingPanna = (this as any).closingPanna;\n  // @ts-ignore\n  const closingDigit = (this as any).closingDigit;\n\n  if (!this.dayPanna && openingPanna) this.dayPanna = openingPanna;\n  if (this.dayDigit == null && openingDigit != null) this.dayDigit = openingDigit;\n  if (!this.nightPanna && closingPanna) this.nightPanna = closingPanna;\n  if (this.nightDigit == null && closingDigit != null) this.nightDigit = closingDigit;\n\n  // Status bridge: allow old 'OPENING_PUBLISHED'\n  // (you already added the enum, this is just a safety)\n  // no mapping needed unless you want to force-convert:\n  // if (this.status === 'OPENING_PUBLISHED') this.status = 'DAY_PUBLISHED';\n\n  next();\n});\n\nexport default models.Round || model<IRound>('Round', RoundSchema);\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAClB;;AAwBA,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,QAAS;AAEf,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAS;IACrC,SAAS;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACtD,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAsB;IAE1E,SAAW;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAC3D,WAAW;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAE3D,UAAY;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAC9D,UAAY;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAC/D,YAAY;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAC9D,YAAY;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAE/D,MAAM;QAAE,MAAM;QAAQ,OAAO;QAAO,SAAS;IAAU;IAEvD,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAQ;YAAoB;YAAgB;SAAS;QAC5D,SAAS;QACT,UAAU;IACZ;AACF,GAAG;IAAE,YAAY;AAAK;AAEtB,YAAY,KAAK,CAAC;IAAE,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;AACrD,mDAAmD;AACnD,YAAY,GAAG,CAAC,YAAY,SAAU,IAAI;IACxC,sCAAsC;IACtC,MAAM,cAAc,AAAC,IAAI,CAAS,WAAW;IAC7C,aAAa;IACb,MAAM,cAAc,AAAC,IAAI,CAAS,WAAW;IAE7C,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,aAAa,IAAI,CAAC,OAAO,GAAG;IACjD,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,aAAa,IAAI,CAAC,SAAS,GAAG;IAErD,qCAAqC;IACrC,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAC/C,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAC/C,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAC/C,aAAa;IACb,MAAM,eAAe,AAAC,IAAI,CAAS,YAAY;IAE/C,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,cAAc,IAAI,CAAC,QAAQ,GAAG;IACpD,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,gBAAgB,MAAM,IAAI,CAAC,QAAQ,GAAG;IACnE,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,cAAc,IAAI,CAAC,UAAU,GAAG;IACxD,IAAI,IAAI,CAAC,UAAU,IAAI,QAAQ,gBAAgB,MAAM,IAAI,CAAC,UAAU,GAAG;IAEvE,+CAA+C;IAC/C,sDAAsD;IACtD,sDAAsD;IACtD,0EAA0E;IAE1E;AACF;uCAEe,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAU,SAAS","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/app/api/round/start/route.ts"],"sourcesContent":["// app/api/round/start/route.ts\nimport { NextResponse } from 'next/server';\nimport { dbConnect } from '@/lib/mongodb';\nimport Round from '@/models/Round';\nimport { cookies } from 'next/headers';\n\nconst timeHHmm = /^([01]\\d|2[0-3]):[0-5]\\d$/;\n\nexport async function POST(req: Request) {\n  const c = await cookies();\n  if (c.get('isAdmin')?.value !== '1') {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  // Parse & validate input early so we never reach Mongoose without the fields\n  const body = await req.json().catch(() => ({} as any));\n  const sessionDate = String(body?.sessionDate ?? '').trim();\n  const dayTime     = String(body?.dayTime ?? '').trim();\n  const nightTime   = String(body?.nightTime ?? '').trim();\n\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(sessionDate)) {\n    return NextResponse.json({ error: 'sessionDate must be YYYY-MM-DD' }, { status: 400 });\n  }\n  if (!timeHHmm.test(dayTime)) {\n    return NextResponse.json({ error: 'dayTime must be HH:mm (00:00–23:59)' }, { status: 400 });\n  }\n  if (!timeHHmm.test(nightTime)) {\n    return NextResponse.json({ error: 'nightTime must be HH:mm (00:00–23:59)' }, { status: 400 });\n  }\n\n  await dbConnect();\n\n  // One round per date\n  const exists = await Round.findOne({ sessionDate }).lean();\n  if (exists) {\n    return NextResponse.json({ error: `Round already exists for ${sessionDate}` }, { status: 400 });\n  }\n\n  const roundId = `R-${sessionDate}-${Date.now()}`;\n\n  // IMPORTANT: write the NEW fields (dayTime/nightTime), not opening/closing\n  const round = await Round.create({\n    roundId,\n    sessionDate,\n    dayTime,\n    nightTime,\n    status: 'READY',\n  });\n\n  return NextResponse.json({ round });\n}\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;AACA;AACA;AACA;;;;;AAEA,MAAM,WAAW;AAEV,eAAe,KAAK,GAAY;IACrC,MAAM,IAAI,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IACtB,IAAI,EAAE,GAAG,CAAC,YAAY,UAAU,KAAK;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,6EAA6E;IAC7E,MAAM,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAQ;IACpD,MAAM,cAAc,OAAO,MAAM,eAAe,IAAI,IAAI;IACxD,MAAM,UAAc,OAAO,MAAM,WAAW,IAAI,IAAI;IACpD,MAAM,YAAc,OAAO,MAAM,aAAa,IAAI,IAAI;IAEtD,IAAI,CAAC,sBAAsB,IAAI,CAAC,cAAc;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;IACA,IAAI,CAAC,SAAS,IAAI,CAAC,UAAU;QAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;IACA,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY;QAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwC,GAAG;YAAE,QAAQ;QAAI;IAC7F;IAEA,MAAM,CAAA,GAAA,gHAAA,CAAA,YAAS,AAAD;IAEd,qBAAqB;IACrB,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CAAC,OAAO,CAAC;QAAE;IAAY,GAAG,IAAI;IACxD,IAAI,QAAQ;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,yBAAyB,EAAE,aAAa;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC/F;IAEA,MAAM,UAAU,CAAC,EAAE,EAAE,YAAY,CAAC,EAAE,KAAK,GAAG,IAAI;IAEhD,2EAA2E;IAC3E,MAAM,QAAQ,MAAM,iHAAA,CAAA,UAAK,CAAC,MAAM,CAAC;QAC/B;QACA;QACA;QACA;QACA,QAAQ;IACV;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAM;AACnC","debugId":null}}]
}