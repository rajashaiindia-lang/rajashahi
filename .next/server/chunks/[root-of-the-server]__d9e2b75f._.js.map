{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\nif (!MONGODB_URI) {\n  throw new Error(\"MONGODB_URI is not set\");\n}\n\n// Global cache to survive hot-reloads in dev\ndeclare global {\n  // eslint-disable-next-line no-var\n  var _mongoose: { conn: typeof mongoose | null, promise: Promise<typeof mongoose> | null } | undefined;\n}\n\nlet cached = global._mongoose;\nif (!cached) cached = global._mongoose = { conn: null, promise: null };\n\nexport async function dbConnect() {\n  if (cached!.conn) return cached!.conn;\n\n  if (!cached!.promise) {\n    cached!.promise = mongoose.connect(MONGODB_URI).then((m) => m);\n  }\n  cached!.conn = await cached!.promise;\n  return cached!.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAQA,IAAI,SAAS,OAAO,SAAS;AAC7B,IAAI,CAAC,QAAQ,SAAS,OAAO,SAAS,GAAG;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAQ,IAAI,EAAE,OAAO,OAAQ,IAAI;IAErC,IAAI,CAAC,OAAQ,OAAO,EAAE;QACpB,OAAQ,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,IAAM;IAC9D;IACA,OAAQ,IAAI,GAAG,MAAM,OAAQ,OAAO;IACpC,OAAO,OAAQ,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/models/Round.ts"],"sourcesContent":["// models/Round.ts\nimport { Schema, Document, models, model } from 'mongoose';\n\nexport type Market = 'KALYAN';\nexport type RoundStatus = 'READY' | 'OPENING_PUBLISHED' | 'CLOSED';\n\n/** Plain shape (what .lean() returns) */\nexport interface RoundCore {\n  roundId: string;               // unique, timestamp-based or your generator\n  sessionDate: string;           // 'YYYY-MM-DD' (local session date)\n  market: Market;                // 'KALYAN' | 'DEMO' (extend later if needed)\n  openingTime: string;           // 'HH:mm' (local publish time)\n  closingTime: string;           // 'HH:mm'\n\n  // Opening side\n  openingPanna?: string;         // '000'..'999'\n  openingDigit?: number;         // 0..9 (derived from openingPanna)\n\n  // Closing side\n  closingPanna?: string;         // '000'..'999'\n  closingDigit?: number;         // 0..9 (derived from closingPanna)\n\n  // Derived convenience\n  jodi?: string;                 // '00'..'99' = `${openingDigit}${closingDigit}`\n\n  status: RoundStatus;\n\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/** Mongoose document shape (when not using .lean()) */\nexport interface IRound extends Document, RoundCore {}\n\nconst timeHHmm = /^([01]\\d|2[0-3]):[0-5]\\d$/;\nconst panna3 = /^\\d{3}$/;\nconst jodi2 = /^\\d{2}$/;\n\nconst RoundSchema = new Schema<IRound>({\n  roundId: { type: String, required: true, unique: true },\n\n  sessionDate: {\n    type: String,\n    required: true,                     // e.g., '2025-10-01'\n    match: /^\\d{4}-\\d{2}-\\d{2}$/\n  },\n  market: {\n    type: String,\n  default: 'KALYAN',\n    required: true\n  },\n\n  openingTime: { type: String, required: true, match: timeHHmm },\n  closingTime: { type: String, required: true, match: timeHHmm },\n\n  openingPanna: { type: String, match: panna3, default: undefined },\n  openingDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  closingPanna: { type: String, match: panna3, default: undefined },\n  closingDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  jodi: { type: String, match: jodi2, default: undefined },\n\n  status: {\n    type: String,\n    enum: ['READY', 'OPENING_PUBLISHED', 'CLOSED'],\n    default: 'READY',\n    required: true\n  }\n}, { timestamps: true });\n\n// Helpful unique constraint to avoid duplicate market-day sessions:\nRoundSchema.index({ market: 1, sessionDate: 1 }, { unique: true });\n\nexport default models.Round || model<IRound>('Round', RoundSchema);\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAClB;;AAiCA,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,QAAQ;AAEd,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAS;IACrC,SAAS;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IAEtD,aAAa;QACX,MAAM;QACN,UAAU;QACV,OAAO;IACT;IACA,QAAQ;QACN,MAAM;QACR,SAAS;QACP,UAAU;IACZ;IAEA,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAC7D,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAE7D,cAAc;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAChE,cAAc;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAEjE,cAAc;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAChE,cAAc;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAEjE,MAAM;QAAE,MAAM;QAAQ,OAAO;QAAO,SAAS;IAAU;IAEvD,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAS;YAAqB;SAAS;QAC9C,SAAS;QACT,UAAU;IACZ;AACF,GAAG;IAAE,YAAY;AAAK;AAEtB,oEAAoE;AACpE,YAAY,KAAK,CAAC;IAAE,QAAQ;IAAG,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAEjD,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAU,SAAS","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/app/api/round/current/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { dbConnect } from '@/lib/mongodb';\nimport Round, { RoundCore } from '@/models/Round';\nimport { cookies } from 'next/headers';\n\nexport async function GET() {\n  await dbConnect();\n  const c = await cookies();\n  const isAdmin = c.get('isAdmin')?.value === '1';\n\n  const latest = await Round.findOne().sort({ createdAt: -1 }).lean<RoundCore | null>();\n  if (!latest) return NextResponse.json({ round: null });\n\n  if (!isAdmin) {\n    // Minimal for guests\n    return NextResponse.json({\n      round: {\n        roundId: latest.roundId,\n        market: latest.market,\n        sessionDate: latest.sessionDate,\n        openingTime: latest.openingTime,\n        closingTime: latest.closingTime,\n        status: latest.status,\n        // Publish only what has been revealed\n        opening: latest.openingDigit !== undefined ? {\n          panna: latest.openingPanna,\n          digit: latest.openingDigit\n        } : null,\n        closing: latest.closingDigit !== undefined ? {\n          panna: latest.closingPanna,\n          digit: latest.closingDigit\n        } : null,\n        jodi: latest.jodi ?? null\n      }\n    });\n  }\n\n  // Full for admin\n  return NextResponse.json({ round: latest });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe;IACpB,MAAM,CAAA,GAAA,gHAAA,CAAA,YAAS,AAAD;IACd,MAAM,IAAI,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IACtB,MAAM,UAAU,EAAE,GAAG,CAAC,YAAY,UAAU;IAE5C,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CAAC,OAAO,GAAG,IAAI,CAAC;QAAE,WAAW,CAAC;IAAE,GAAG,IAAI;IACjE,IAAI,CAAC,QAAQ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAK;IAEpD,IAAI,CAAC,SAAS;QACZ,qBAAqB;QACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;gBACL,SAAS,OAAO,OAAO;gBACvB,QAAQ,OAAO,MAAM;gBACrB,aAAa,OAAO,WAAW;gBAC/B,aAAa,OAAO,WAAW;gBAC/B,aAAa,OAAO,WAAW;gBAC/B,QAAQ,OAAO,MAAM;gBACrB,sCAAsC;gBACtC,SAAS,OAAO,YAAY,KAAK,YAAY;oBAC3C,OAAO,OAAO,YAAY;oBAC1B,OAAO,OAAO,YAAY;gBAC5B,IAAI;gBACJ,SAAS,OAAO,YAAY,KAAK,YAAY;oBAC3C,OAAO,OAAO,YAAY;oBAC1B,OAAO,OAAO,YAAY;gBAC5B,IAAI;gBACJ,MAAM,OAAO,IAAI,IAAI;YACvB;QACF;IACF;IAEA,iBAAiB;IACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAO;AAC3C","debugId":null}}]
}