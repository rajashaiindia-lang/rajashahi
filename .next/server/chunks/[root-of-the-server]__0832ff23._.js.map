{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\nif (!MONGODB_URI) {\n  throw new Error(\"MONGODB_URI is not set\");\n}\n\n// Global cache to survive hot-reloads in dev\ndeclare global {\n  // eslint-disable-next-line no-var\n  var _mongoose: { conn: typeof mongoose | null, promise: Promise<typeof mongoose> | null } | undefined;\n}\n\nlet cached = global._mongoose;\nif (!cached) cached = global._mongoose = { conn: null, promise: null };\n\nexport async function dbConnect() {\n  if (cached!.conn) return cached!.conn;\n\n  if (!cached!.promise) {\n    cached!.promise = mongoose.connect(MONGODB_URI).then((m) => m);\n  }\n  cached!.conn = await cached!.promise;\n  return cached!.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAQA,IAAI,SAAS,OAAO,SAAS;AAC7B,IAAI,CAAC,QAAQ,SAAS,OAAO,SAAS,GAAG;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAQ,IAAI,EAAE,OAAO,OAAQ,IAAI;IAErC,IAAI,CAAC,OAAQ,OAAO,EAAE;QACpB,OAAQ,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,IAAM;IAC9D;IACA,OAAQ,IAAI,GAAG,MAAM,OAAQ,OAAO;IACpC,OAAO,OAAQ,IAAI;AACrB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/models/Round.ts"],"sourcesContent":["// models/Round.ts\nimport { Schema, Document, models, model } from 'mongoose';\n\nexport type Market = 'KALYAN';\nexport type RoundStatus = 'READY' | 'OPENING_PUBLISHED' | 'CLOSED';\n\n/** Plain shape (what .lean() returns) */\nexport interface RoundCore {\n  roundId: string;               // unique, timestamp-based or your generator\n  sessionDate: string;           // 'YYYY-MM-DD' (local session date)\n  market: Market;                // 'KALYAN' | 'DEMO' (extend later if needed)\n  openingTime: string;           // 'HH:mm' (local publish time)\n  closingTime: string;           // 'HH:mm'\n\n  // Opening side\n  openingPanna?: string;         // '000'..'999'\n  openingDigit?: number;         // 0..9 (derived from openingPanna)\n\n  // Closing side\n  closingPanna?: string;         // '000'..'999'\n  closingDigit?: number;         // 0..9 (derived from closingPanna)\n\n  // Derived convenience\n  jodi?: string;                 // '00'..'99' = `${openingDigit}${closingDigit}`\n\n  status: RoundStatus;\n\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/** Mongoose document shape (when not using .lean()) */\nexport interface IRound extends Document, RoundCore {}\n\nconst timeHHmm = /^([01]\\d|2[0-3]):[0-5]\\d$/;\nconst panna3 = /^\\d{3}$/;\nconst jodi2 = /^\\d{2}$/;\n\nconst RoundSchema = new Schema<IRound>({\n  roundId: { type: String, required: true, unique: true },\n\n  sessionDate: {\n    type: String,\n    required: true,                     // e.g., '2025-10-01'\n    match: /^\\d{4}-\\d{2}-\\d{2}$/\n  },\n  market: {\n    type: String,\n  default: 'KALYAN',\n    required: true\n  },\n\n  openingTime: { type: String, required: true, match: timeHHmm },\n  closingTime: { type: String, required: true, match: timeHHmm },\n\n  openingPanna: { type: String, match: panna3, default: undefined },\n  openingDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  closingPanna: { type: String, match: panna3, default: undefined },\n  closingDigit: { type: Number, min: 0, max: 9, default: undefined },\n\n  jodi: { type: String, match: jodi2, default: undefined },\n\n  status: {\n    type: String,\n    enum: ['READY', 'OPENING_PUBLISHED', 'CLOSED'],\n    default: 'READY',\n    required: true\n  }\n}, { timestamps: true });\n\n// Helpful unique constraint to avoid duplicate market-day sessions:\nRoundSchema.index({ market: 1, sessionDate: 1 }, { unique: true });\n\nexport default models.Round || model<IRound>('Round', RoundSchema);\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAClB;;AAiCA,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,QAAQ;AAEd,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAS;IACrC,SAAS;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IAEtD,aAAa;QACX,MAAM;QACN,UAAU;QACV,OAAO;IACT;IACA,QAAQ;QACN,MAAM;QACR,SAAS;QACP,UAAU;IACZ;IAEA,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAC7D,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAS;IAE7D,cAAc;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAChE,cAAc;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAEjE,cAAc;QAAE,MAAM;QAAQ,OAAO;QAAQ,SAAS;IAAU;IAChE,cAAc;QAAE,MAAM;QAAQ,KAAK;QAAG,KAAK;QAAG,SAAS;IAAU;IAEjE,MAAM;QAAE,MAAM;QAAQ,OAAO;QAAO,SAAS;IAAU;IAEvD,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAS;YAAqB;SAAS;QAC9C,SAAS;QACT,UAAU;IACZ;AACF,GAAG;IAAE,YAAY;AAAK;AAEtB,oEAAoE;AACpE,YAAY,KAAK,CAAC;IAAE,QAAQ;IAAG,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAEjD,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAU,SAAS","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/hardik/rajashai/app/api/monthly-results/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { dbConnect } from '@/lib/mongodb';\nimport Round, { RoundCore } from '@/models/Round';\n\n// Build year, month (1-12) defaults to current IST month\nfunction currentISTYMD() {\n  // Asia/Kolkata is UTC+05:30. For simplicity, use system time; your sessionDate is already local YYYY-MM-DD.\n  const now = new Date();\n  const y = now.getFullYear();\n  const m = now.getMonth() + 1; // 1-12\n  return { y, m };\n}\n\nfunction pad2(n: number) { return String(n).padStart(2, '0'); }\n\n// Compute last day of month\nfunction lastDay(y: number, m: number) {\n  return new Date(y, m, 0).getDate(); // JS: month is 1-based when day=0 trick\n}\n\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const y = parseInt(url.searchParams.get('year') || '', 10);\n  const m = parseInt(url.searchParams.get('month') || '', 10);\n\n  const { y: cy, m: cm } = currentISTYMD();\n  const year = Number.isFinite(y) ? y : cy;\n  const month = Number.isFinite(m) && m >= 1 && m <= 12 ? m : cm;\n\n  const start = `${year}-${pad2(month)}-01`;\n  const end = `${year}-${pad2(month)}-${pad2(lastDay(year, month))}`;\n\n  await dbConnect();\n\n  // sessionDate is 'YYYY-MM-DD' so string range works\n  const rounds = await Round.find({\n    sessionDate: { $gte: start, $lte: end }\n  })\n    .sort({ sessionDate: 1 })\n    .lean<RoundCore[]>();\n\n  const items = rounds.map(r => {\n    const jodi =\n      r.jodi ??\n      (r.openingDigit != null && r.closingDigit != null\n        ? `${r.openingDigit}${r.closingDigit}`\n        : null);\n\n    return {\n      date: r.sessionDate,       // 'YYYY-MM-DD'\n      jodi,                      // '00'..'99' or null if not closed yet\n      status: r.status\n    };\n  });\n\n  return NextResponse.json({\n    year, month,\n    results: items\n  });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,yDAAyD;AACzD,SAAS;IACP,4GAA4G;IAC5G,MAAM,MAAM,IAAI;IAChB,MAAM,IAAI,IAAI,WAAW;IACzB,MAAM,IAAI,IAAI,QAAQ,KAAK,GAAG,OAAO;IACrC,OAAO;QAAE;QAAG;IAAE;AAChB;AAEA,SAAS,KAAK,CAAS;IAAI,OAAO,OAAO,GAAG,QAAQ,CAAC,GAAG;AAAM;AAE9D,4BAA4B;AAC5B,SAAS,QAAQ,CAAS,EAAE,CAAS;IACnC,OAAO,IAAI,KAAK,GAAG,GAAG,GAAG,OAAO,IAAI,wCAAwC;AAC9E;AAEO,eAAe,IAAI,GAAY;IACpC,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;IAC3B,MAAM,IAAI,SAAS,IAAI,YAAY,CAAC,GAAG,CAAC,WAAW,IAAI;IACvD,MAAM,IAAI,SAAS,IAAI,YAAY,CAAC,GAAG,CAAC,YAAY,IAAI;IAExD,MAAM,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG;IACzB,MAAM,OAAO,OAAO,QAAQ,CAAC,KAAK,IAAI;IACtC,MAAM,QAAQ,OAAO,QAAQ,CAAC,MAAM,KAAK,KAAK,KAAK,KAAK,IAAI;IAE5D,MAAM,QAAQ,GAAG,KAAK,CAAC,EAAE,KAAK,OAAO,GAAG,CAAC;IACzC,MAAM,MAAM,GAAG,KAAK,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,KAAK,QAAQ,MAAM,SAAS;IAElE,MAAM,CAAA,GAAA,gHAAA,CAAA,YAAS,AAAD;IAEd,oDAAoD;IACpD,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CAAC,IAAI,CAAC;QAC9B,aAAa;YAAE,MAAM;YAAO,MAAM;QAAI;IACxC,GACG,IAAI,CAAC;QAAE,aAAa;IAAE,GACtB,IAAI;IAEP,MAAM,QAAQ,OAAO,GAAG,CAAC,CAAA;QACvB,MAAM,OACJ,EAAE,IAAI,IACN,CAAC,EAAE,YAAY,IAAI,QAAQ,EAAE,YAAY,IAAI,OACzC,GAAG,EAAE,YAAY,GAAG,EAAE,YAAY,EAAE,GACpC,IAAI;QAEV,OAAO;YACL,MAAM,EAAE,WAAW;YACnB;YACA,QAAQ,EAAE,MAAM;QAClB;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB;QAAM;QACN,SAAS;IACX;AACF","debugId":null}}]
}